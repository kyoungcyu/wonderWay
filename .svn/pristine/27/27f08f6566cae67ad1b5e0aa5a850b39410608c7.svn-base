package kr.or.ddit.member.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.member.mapper.MypageMapper;
import kr.or.ddit.member.service.MmMemService;
import kr.or.ddit.member.service.MypageService;
import kr.or.ddit.member.service.impl.MmEmailServiceImpl;
import kr.or.ddit.util.CommonFile;
import kr.or.ddit.vo.BrdVO;
import kr.or.ddit.vo.BusiVO;
import kr.or.ddit.vo.CupnVO;
import kr.or.ddit.vo.GradVO;
import kr.or.ddit.vo.HCupnVO;
import kr.or.ddit.vo.MemVO;
import kr.or.ddit.vo.MmRsvListVO;
import kr.or.ddit.vo.MmRsvRntcarListVO;
import kr.or.ddit.vo.PayVO;
import kr.or.ddit.vo.RfdReqVO;
import kr.or.ddit.vo.RsvListVO;
import kr.or.ddit.vo.RsvVO;


@RequestMapping("/member/mypage")
@Controller
public class MypageController {
	
	
	
	private final Logger log = 
			LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	MypageService mypageService;
	
	@Autowired
	MmMemService memService;
	
	
	@Autowired
	MmEmailServiceImpl mmEmailServiceImpl;
	
	
	//마이페이지- 내 정보 O :
	@GetMapping("/myInfo")
	public String myInfo(@ModelAttribute MemVO memVO, Principal principal, Model model) {
	    String memId = principal.getName();
	    log.info("memId: " + memId);

	    MemVO data = this.mypageService.detailMyInfo(memId);
	    log.info("data : "+data);

	    model.addAttribute("data", data);

	    return "member/mypage/myInfo";
	}

	
	//내 프로필 - 정보 수정하기  이미지
	@ResponseBody
	@PostMapping("/updateMyInfo")
	public int updateMyInfo(@RequestBody MemVO memVO, Principal principal) {
		    
		int result = this.mypageService.updateMyInfo(memVO);
		log.info("result : " + result);
		
		return result;
	}
	
	//이미지변경
	@PostMapping("/filePost")
	@ResponseBody
	public int  filePost(@RequestBody MemVO memVO) {
		log.info("filePost왓다:" );
		log.info("memVO:" +memVO);
		  
		File uploadPath = new File(CommonFile.uploadFolder+"\\profile", CommonFile.getFolder());
		if (uploadPath.exists() == false) {
			uploadPath.mkdirs();
		}
		
		log.info("uploadFolder : " + CommonFile.uploadFolder);
		
		return 0;
	}	

	
	//이메일 변경
	@GetMapping("/emailModify")
	public String emailModify(@ModelAttribute MemVO memVO, Principal principal, Model model) {
		String memId = principal.getName();
		memVO.setMemId(memId);
		
		MemVO data = this.mypageService.detailMyInfo(memId);
		log.info("data : " + data);
		model.addAttribute("data",data);
		
		return "member/mypage/emailModify";
	}	
	//이메일 변경
	@ResponseBody
	@PostMapping("/emailPost")
	public String emailPost(@RequestBody MemVO memVO, Principal principal,Model model) {
		String memId = principal.getName();
		memVO.setMemId(memId);
		log.info("memId : " + memId);
		
		String memEmail = memVO.getMemEmail();
		log.info("memEmail : " + memEmail);
	
		
		int result = this.mypageService.updateMyEmail(memVO);
		log.info("result : " + result);
		
		
		
		if(result > 0) {
			return "success";
			
		} else {
			return "fail";
		}
				
	}
	
	//이메일 인증 시 인증코드 보내기
	@ResponseBody
	@PostMapping("/mailCheck")
	public String mailConfirm(@RequestParam String newEmail) {
	    try {
	        String code = mmEmailServiceImpl.sendSimpleMessage(newEmail);
	        log.info("인증코드: " + code);
	        return code;
	    } catch (Exception e) {
	        e.printStackTrace();
	        return "Error: Failed to send email confirmation";
	    }
	}

	//나의 비밀번호 변경
	@GetMapping("/passModify")
	public String passModify(MemVO memVO, Principal principal,Model model) {
		
		String memId = principal.getName();

		
		MemVO data = this.mypageService.detailMyInfo(memId);
		log.info("data : " + data);
		model.addAttribute("data",data);
	
		
		return "member/mypage/passModify";
	}
	

	//내 프로필 - 비밀번호 변경
	@ResponseBody
	@PostMapping("/passModifyPost")
	public int passModifyPost(@RequestBody MemVO memVO, Principal principal) {
		
		String memId = principal.getName();
		memVO.setMemId(memId);
		
		String memPw = memVO.getMemPw();
		log.info("memPw : " + memPw);
		
		int result = this.mypageService.updateMyPass(memVO);
		log.info("result : " + result);
		
		return result;
	}

	
	
	
	
	
	
	
	//예약내역
	@GetMapping("/myBooking")
	public String myBooking(RsvVO rsvVO, MmRsvListVO mmRsvListVO,MmRsvRntcarListVO mmRsvRntcarListVO, Principal principal,Model model) {
		
		Map<String, String> map = new HashMap<String, String>();
		
		String memId = principal.getName();
		map.put("memId", memId);
		
		/* 결제 대기 */
		map.put("rsvCode", "K01");
		
		//숙박 
		List<MmRsvListVO> rsvCodeK01 = this.mypageService.allBooking(map);
		model.addAttribute("rsvCodeK01",rsvCodeK01);
		log.info("rsvCodeK01 : " + rsvCodeK01);
		//렌터카
		List<MmRsvRntcarListVO> carCodeK01 = this.mypageService.rntBooking(map);
		model.addAttribute("carCodeK01",carCodeK01);
		log.info("carCodeK01 : " + carCodeK01);
		
		/* 결제 완료 */
		map.put("rsvCode", "K02");
		//숙박
		List<MmRsvListVO> rsvCodeK02 = this.mypageService.allBooking(map);
		model.addAttribute("rsvCodeK02",rsvCodeK02);
		log.info("rsvCodeK02 : " + rsvCodeK02);
		
		//렌터카
		List<MmRsvRntcarListVO> carCodeK02 = this.mypageService.rntBooking(map);
		model.addAttribute("carCodeK02",carCodeK02);
		log.info("carCodeK02 : " + carCodeK02);
		
		//결제완료 (1.rsvDt < today : 리뷰작성 2.rsvDt > today : 결제완료)
		//1. 리뷰작성
		List<MmRsvListVO> completePay = this.mypageService.completePay(map);
		model.addAttribute("completePay",completePay);
		log.info("completePay : " + completePay);	
		//2.결제확인
		List<MmRsvListVO> completePayBefUse = this.mypageService.completePayBefUse(map);
		model.addAttribute("completePayBefUse",completePayBefUse);
		log.info("completePayBefUse : " + completePayBefUse);			

		
		
		/* 예약 완료 */
		map.put("rsvCode", "K03");
		
		//숙박
		List<MmRsvListVO> rsvCodeK03 = this.mypageService.allBooking(map);
		model.addAttribute("rsvCodeK03",rsvCodeK03);
		log.info("rsvCodeK03 : " + rsvCodeK03);	
		
		//렌터카
		List<MmRsvRntcarListVO> carCodeK03 = this.mypageService.rntBooking(map);
		model.addAttribute("carCodeK03",carCodeK03);
		log.info("carCodeK03 : " + carCodeK03);	
		
		/* 예약취소 시 - 1. 환불 100% 2. 환불 100% x - K03 - 취소신청*/	
		//2. 환불 100% x
		List<MmRsvListVO> rsvCancel30Bef = this.mypageService.rsvCancel30Bef(map);
		model.addAttribute("rsvCancel30Bef",rsvCancel30Bef);
		log.info("rsvCancel30Bef : " + rsvCancel30Bef);	
		
		
		/* 취소 완료 */
		map.put("rsvCode", "K04");
		
		//숙박
		List<MmRsvListVO> rsvCodeK04 = this.mypageService.allBooking(map);
		model.addAttribute("rsvCodeK04",rsvCodeK04);
		log.info("rsvCodeK04 : " + rsvCodeK04);	
		
		//렌터카
		List<MmRsvRntcarListVO> carCodeK04 = this.mypageService.rntBooking(map);
		model.addAttribute("carCodeK04",carCodeK04);
		log.info("carCodeK04 : " + carCodeK04);	
		

		
		
		/* 취소확정 -> K04 */
		List<MmRsvListVO> rsvCancelK04 = this.mypageService.rsvCancelK04(map);
		model.addAttribute("rsvCancelK04",rsvCancelK04);
		log.info("rsvCancelK04 : " + rsvCancelK04);			
		
		return "member/mypage/myBooking";
	}	
	
	/* 결제대기 취소*/
	@PostMapping("/myBooking/canncelBefPay")
	public String cancelBefPay() {
		
		
		return "";
	}
	
	/* 예약취소*/
	//수수료 0 일때
	@ResponseBody
	@PostMapping("/myBooking/cancelFee0")
	public int cancelFee0(@RequestBody RfdReqVO rfdReqVO, PayVO payVO) {
		log.info("rfdReqVO"+rfdReqVO);
		int result= this.mypageService.rfdOk(rfdReqVO);
		log.info("result : " + result);
		
		return result;
	}
	//수수료 있을 떄 
	@ResponseBody
	@PostMapping("/myBooking/cancelHasFee")
	public int cancelHasFee(@RequestBody RfdReqVO rfdReqVO, PayVO payVO) {
		
		int result = this.mypageService.rfdRequest(rfdReqVO);
		log.info("result 수수료 : " + result);
		return result;
	}	
	
	//예약내역조회
	//console.log("dt : " + JSON.stringify(dt))
	@ResponseBody
	@PostMapping("/myBooking/rsvDetail")
	public RsvVO rsvDetail(@RequestBody RsvVO rsvVO) {
		log.info("rsvVO : " + rsvVO);
		
		rsvVO = this.mypageService.rsvDetail(rsvVO);
		
		return rsvVO;
	}
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/////////////////////////////////////////////////
	//나의 카드
	@GetMapping("/myCard")
	public String myCard(@ModelAttribute MemVO memVO) {
		
		
		
		return "member/mypage/myCard";
	}
	
	
	//나의 카드 추가
	@GetMapping("/myCardAdd")
	public String myCardAdd() {
		return "member/mypage/myCardAdd";
	}
	
	/////////////////////////////////////////////////
	//관심내역
	@GetMapping("/myLike")
	public String myLike() {
		return "member/mypage/myLike";
	}	
	/////////////////////////////////////////////////
	//쿠폰 및 마일리지
	@GetMapping("/myCoupon")
	public String myCoupon(MemVO memVO,CupnVO cupnVO, HCupnVO hCupnVO, Principal principal, Model model) {
		
		String memId = principal.getName();
		memVO.setMemId(memId);
		
		MemVO data = this.mypageService.detailMyInfo(memId);
		log.info("data : " + data);
		model.addAttribute("memVO",data);
		
		//등급조회
		GradVO gradVO = this.mypageService.myGrad(memId);
		model.addAttribute("gradVO",gradVO);
		log.info("gradVO : " + gradVO);
		

		//쿠폰함 조회
		List<CupnVO> myCoupon = this.mypageService.myCoupon(memId);
		model.addAttribute("myCoupon",myCoupon);
		log.info("myCoupon : " + myCoupon);
		
		//쿠폰존 조회 
		List<CupnVO> couponZone = this.mypageService.couponZone(cupnVO);
		model.addAttribute("couponZone",couponZone);
		
		return "member/mypage/myCoupon";
	}		
	//쿠폰 다운로드
	@ResponseBody
	@PostMapping("/myCouponPost")
	public int myCouponPost(@RequestBody HCupnVO hCupnVO, Principal principal) {
		log.info("hCupnVO : " + hCupnVO);
		
		String memId = principal.getName();
		log.info("memId : " + memId);
		
		//쿠폰 다운로드
		hCupnVO.setMemId(memId);
		
		int result = this.mypageService.downCoupon(hCupnVO);
		log.info("result : " + result);
		
		return result;
	}
	
	/////////////////////////////////////////////////
	//나의 작성글
	@GetMapping("/myWrite")
	public String myWrite(Principal principal, Model model) {
		
		String memId = principal.getName();
		log.info("memId : " + memId);
		
		
		
		//상품 목록 조회 -> 예약코드? k03 조회
		List<MmRsvRntcarListVO> completeBooking = this.mypageService.completeBooking(memId);
		model.addAttribute("completeBooking",completeBooking);
		log.info("completeBooking : " + completeBooking);
		
		//리뷰조회
		
		List<BrdVO> myReviewList = this.mypageService.myReviewList(memId);
		log.info("myReviewList : " + myReviewList);
		model.addAttribute("myReviewList",myReviewList);
		
		
		
		
		
		
		return "member/mypage/myWrite";
	}	
	/////////////////////////////////////////////////
	//업체문의
	@GetMapping("/myCs")
	public String myCs() {
		return "member/mypage/myCs";
	}
	////////////////////////////////////////////////
	//장바구니
	@GetMapping("/myCart")
	public String myCart() {
		return "member/mypage/myCart";
	}	
	
	//회원탈퇴 페이지
	@GetMapping("/deleteMem")
	public String deleteMem(Principal principal, Model model) {
		String memId = principal.getName();
	    
	    MemVO data = this.mypageService.detailMyInfo(memId);
	    model.addAttribute("data",data);
		return "member/mypage/deleteMem";
	}	
	//회원탈퇴
	@ResponseBody
	@PostMapping("/deleteMemPost")
	public String deleteMemPost(@RequestBody MemVO memVO, Principal principal, Model model) {
		log.info("memVO : " + memVO);
	    int result = this.mypageService.deleteMem(memVO);
	    log.info("result : " + result);
	    
		if(result > 0) {
			return "success";
		}else {
			return "fail";
		}
	}
	
	//얼굴인식
	@ResponseBody
	@PostMapping("/faceRegPost")
	public MemVO faceReg(Principal principal) {
		String memId = principal.getName();
	    log.info("memId: " + memId);
	    
	    MemVO data = this.mypageService.detailMyInfo(memId);
	    log.info("MemVO: " + data);
	    
		return data;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//회원 프로필 사진
	//연월일폴더 생성
	private String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		Date date = new Date();
		
		//2023-05-02
		String str = sdf.format(date);
		
		return str.replace("-", File.separator);
	}
	
	//이미지인지 체킹. 썸네일은 이미지만 가능.
	private boolean checkImageType(File file) {
	//MIME 타입을 알아낼것임.  .jpeg / .jpg의 MIME타입 : image/jpeg
	
	String contentType;
	
	try {
		contentType = Files.probeContentType(file.toPath());
		log.info("contentType : " + contentType);
		//image/jpeg는 image로 시작함		
		return contentType.startsWith("image");
	} catch (IOException e) {
		e.printStackTrace();
	}
	return false;
}
	

}

package kr.or.ddit.admin.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.admin.service.AdAdvService;
import kr.or.ddit.admin.service.AdBrdService;
import kr.or.ddit.admin.service.AdEmailService;
import kr.or.ddit.admin.service.AdMemService;
import kr.or.ddit.admin.service.AdRfdService;
import kr.or.ddit.admin.service.AdRsvService;
import kr.or.ddit.util.PagingDTO;
import kr.or.ddit.vo.AdvListVO;
import kr.or.ddit.vo.AttachDeVO;
import kr.or.ddit.vo.BrdVO;
import kr.or.ddit.vo.MemVO;
import kr.or.ddit.vo.RfdListVO;
import kr.or.ddit.vo.RsvListVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/admin")
@Controller
public class AdminController {
	@Autowired
	AdMemService memServiece;
	
	@Autowired
	AdBrdService brdServiece;
	
	@Autowired
	AdRsvService adRsvService;
	
	@Autowired
	AdRfdService adRfdService;
	
	@Autowired
	AdAdvService adAdvService;
	
	@Autowired
	AdEmailService adEmailService;
	
	/**
	 * 관리자 메인
	 * @return
	 */
	@GetMapping("/main")
	public String main() {
		return "admin/main";
	}
	
	/**
	 * 회원 목록
	 * @param model
	 * @param keyword
	 * @param sort
	 * @param currentPage
	 * @return
	 */
	@GetMapping("/mem/list")
	public String memList(Model model, 
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		
	    Map<String, String> map = new HashMap<String, String>();
	    map.put("keyword", keyword);
	    map.put("sort", sort);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
	    
		List<MemVO> memList = this.memServiece.memList(map);
		log.info("memList : " + memList);
		
		int total = this.memServiece.memTotal(map);
		log.info("total : " + total);
		
		PagingDTO<MemVO> memPage = new PagingDTO<MemVO>(total, currentPage, size, memList);
		
		log.info("memPage : " + memPage);
		
		model.addAttribute("data", memPage);
		
		return "admin/mem/list";
	}
	
	/**
	 * 회원 제재
	 * @param model
	 * @param keyword
	 * @param sort
	 * @param currentPage
	 * @return
	 */
	@GetMapping("/mem/restriction")
	public String memRestriction(Model model,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		Map<String, String> map = new HashMap<String, String>();
	    map.put("keyword", keyword);
	    map.put("sort", sort);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
	    
		List<MemVO> memList = this.memServiece.memList(map);
		log.info("memList : " + memList);
		
		int total = this.memServiece.memTotal(map);
		log.info("total : " + total);
		
		PagingDTO<MemVO> memPage = new PagingDTO<MemVO>(total, currentPage, size, memList);
		
		log.info("memPage : " + memPage);
		
		model.addAttribute("data", memPage);
		
		return "admin/mem/restriction";
	}
	
	//회원 상세
	@GetMapping("/mem/detail")
    public String memberDetail(@RequestParam("memId") String memId, Model model) {
		log.info("memId : " + memId);
		MemVO memVO = new MemVO();
		memVO.setMemId(memId);
		memVO = this.memServiece.memDetail(memVO);
		log.info("memVO : " + memVO);
		
		List<BrdVO> brdList = this.memServiece.memBrdList(memVO);
		log.info("brdList : " + brdList);
		
		model.addAttribute("memVO", memVO);
		model.addAttribute("brdList", brdList);
		
		return "admin/mem/detail";
    }
	
	//회원 경고 상태 변경
	@ResponseBody
	@PostMapping("/mem/wrnStUpdate")
	public String wrnStUpdate(@RequestBody Map<String, String> map, MemVO memVO) {
		log.info("map : " + map);
		
		String memId = map.get("memId");
		String wrnSt = map.get("wrnSt");
		String intrResn = map.get("intrResn");
        
        memVO.setMemId(memId);
        memVO.setWrnSt(wrnSt);
        int update = this.memServiece.updateWarningStatus(memVO);
        log.info("update : " + update);
        
        memVO = this.memServiece.memDetail(memVO);
        log.info("memVO : " + memVO);
        String memEmail = memVO.getMemEmail();
        String subject = "";
        
        if(wrnSt.equals("0")) {
        	int delete = this.memServiece.deleteIntrMem(map);
        	log.info("delete : " + delete);
        }
        
        if (wrnSt.equals("1")) {
        	int insert = this.memServiece.updateWarningCnt(memVO);
        	log.info("insert : " + insert);
        	subject += "[wonderWay] 게시판 정책 위반으로 경고 조치합니다.";
        	log.info("memEmail : " + memEmail + ", subject : "+ subject + ", intrResn : " + intrResn);
        	this.adEmailService.sendEmail(memEmail, subject, intrResn);
        }
        
        if (wrnSt.equals("2")) {
        	int insert = this.memServiece.insertInrtMem(map);
        	log.info("insert : " + insert);
        	subject += "[wonderWay] 게시판 정책 위반으로 1개월 정지합니다.";
        	log.info("memEmail : " + memEmail + ", subject : "+ subject + ", intrResn : " + intrResn);
        	this.adEmailService.sendEmail(memEmail, subject, intrResn);
        }
        
		return memId;
	}
	
	//회원 상담/채팅
	@GetMapping("/mem/counseling")
	public String memCounseling() {
		return "admin/mem/counseling";
	}
	
	//숙박 업체 관리
	@GetMapping("/busi/sty")
	public String busiAcm(Model model) {
		return "admin/busi/sty";
	}
	
	//렌터카 업체 관리
	@GetMapping("/busi/rnt")
	public String busiRnt(Model model) {
		return "admin/busi/rnt";
	}
	
	//게시판 목록
	@GetMapping("/brd/list")
	public String brdList(Model model,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		Map<String, String> map = new HashMap<String, String>();
	    map.put("keyword", keyword);
	    map.put("sort", sort);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
	    
		List<BrdVO> brdList = this.brdServiece.brdList(map);
		int total = this.brdServiece.brdTotal(map);
		
		PagingDTO<BrdVO> brdPage = new PagingDTO<BrdVO>(total, currentPage, size, brdList);
		
		model.addAttribute("data", brdPage);
		
		return "admin/brd/list";
	}
	
	//공지사항
	@GetMapping("/brd/notice")
	public String brdNotice(Model model,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		Map<String, String> map = new HashMap<String, String>();
	    map.put("keyword", keyword);
	    map.put("sort", sort);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
	    
		List<BrdVO> brdList = this.brdServiece.brdNotice(map);
		int total = this.brdServiece.noticeTotal(map);
		
		PagingDTO<BrdVO> brdPage = new PagingDTO<BrdVO>(total, currentPage, size, brdList);
		
		model.addAttribute("data", brdPage);
		
		return "admin/brd/notice";
	}
	
	//공지사항 작성
	@GetMapping("/brd/noticeRegistration")
	public String noticeRegistration() {
		return "admin/brd/noticeRegistration";
	}
	
	//공지사항 등록
	@PostMapping("/brd/noticeRegistrationPost")
	public String noticeRegistrationPost(@Validated @ModelAttribute BrdVO brdVO, AttachDeVO attachDeVO, BindingResult bResult) {
		int result = this.brdServiece.noticeRegistration(brdVO);
		
		// 유효성 검사 결과 체킹///
		if (bResult.hasErrors()) { // true :오류 있음
			List<ObjectError> allErrors = bResult.getAllErrors();
			for (ObjectError objectError : allErrors) {
				log.error("allError : " + objectError);
			}
			// 입력폼으로 다시 forwarding. 오류 정보도 함께 감.
			return "redirect:/admin/brd/noticeRegistration";
		}
		
		return "redirect:/admin/brd/notice";
	}
	
////////////////김찬수 ////////////////
	
	@GetMapping("/reserve/refund")
	public String refundList(Model model
						   , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
						   , @RequestParam(value = "keyword", required = false, defaultValue = "") String keyword
						   , @RequestParam(value = "sort", required = false, defaultValue = "") String sort
						   , @RequestParam(value = "period", required = false, defaultValue = "") String period) {
		
		Map<String,String> map = new HashMap<String, String>();
		int size = 10;
		
		map.put("currentPage", Integer.toString(currentPage));
		map.put("size", String.valueOf(size));
		map.put("keyword", keyword);
		map.put("sort", sort);

		if(!period.equals("")) {
			String[] dateTodate = new String[3];
			dateTodate = period.split("\\s");
			if(dateTodate.length < 3) {
				log.debug("Split Length : " + dateTodate.length);
				return "redirect:/admin/reserve/list";
			}
			map.put("periodSt", dateTodate[0]);
			map.put("periodEd", dateTodate[2]);
		}
		
		List<RfdListVO> rfdListVOList = this.adRfdService.rfdList(map);
		log.info("예약 목록 : " + rfdListVOList);
		
		int total = this.adRfdService.getTotal(map);
		log.info("total : " + total);
		
		PagingDTO<RfdListVO> data = new PagingDTO<RfdListVO>(total, currentPage, size, rfdListVOList); 
		
		model.addAttribute("data", data);
		
		return "admin/reserve/refund";
	}
	
	@ResponseBody
	@PostMapping("/reserve/rfdDetailPost")
	public RfdListVO refundDetail(@RequestParam("payId") String payId) {
		log.info("payId : " + payId);
		
		RfdListVO data = this.adRfdService.rfdDetail(payId);
		
		log.info("RfdListVO : " + data);
		
		return data;
	}
	
	@ResponseBody
	@PostMapping("/reserve/rfdAccept")
	public String refundAccept(@RequestParam("acceptId") String payId) {
		log.info("Called Accept Refund");
		
		int cnt = this.adRfdService.rfdAccept(payId);
		cnt += this.adRfdService.rsvAccept(payId);
		
		if(cnt > 1) {
			log.info("update success");
			return "success";
		} else {
			return "failed";
		}
	}

	@ResponseBody
	@PostMapping("/reserve/rfdDenied")
	public String refundDenied(@RequestParam("deniedId") String payId) {
		int cnt = this.adRfdService.rfdDenied(payId);
		
		if(cnt > 0) {
			log.info("update success");
			return "success";
		} else {
			return "failed";
		}
	}
	
	@ResponseBody
	@PostMapping("/reserve/rfdFeePost")
	public String refundFee(@RequestParam("radioFee") String radioFee
						  , @RequestParam("selectFee") String selectFee
						  , @RequestParam("inputFee") String inputFee) {
		
		log.info("postValues : " + radioFee + ", "+ selectFee + ", "+ inputFee);
		String rfdFeeId = radioFee+selectFee;
		
		Map<String, String> map = new HashMap<String, String>();
		map.put("rfdFeeId", rfdFeeId);
		map.put("rfdFeePer", inputFee);
		
		
		int cnt = adRfdService.rfdUpdateFee(map);
		
		
		if(cnt > 0) {
			log.info("update success");
			return "success";
		} else {
			return "failed";
		}
	}
	
	@GetMapping("/advertise/list")
	public String advertiseList(Model model
 							  , @RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage
							  , @RequestParam(value = "keyword", required = false, defaultValue = "") String keyword
							  , @RequestParam(value = "sort", required = false, defaultValue = "") String sort
							  , @RequestParam(value = "period", required = false, defaultValue = "") String period) {
		log.info("currentPage : " + currentPage);
		log.info("keyword : " + keyword);
		log.info("sort : " + sort);
		log.info("period : " + period);
		
		Map<String,String> map = new HashMap<String, String>();
		int size = 10;
		
		map.put("currentPage", Integer.toString(currentPage));
		map.put("size", String.valueOf(size));
		map.put("keyword", keyword);
		map.put("sort", sort);

		if(!period.equals("")) {
			String[] dateTodate = new String[3];
			dateTodate = period.split("\\s");
			if(dateTodate.length < 3) {
				log.debug("Split Length : " + dateTodate.length);
				return "redirect:/admin/advertise/list";
			}
			map.put("periodSt", dateTodate[0]);
			map.put("periodEd", dateTodate[2]);
		}
		
		List<AdvListVO> advListVOList = this.adAdvService.advList(map);
		
		for(AdvListVO vo : advListVOList) {
			if(vo.getAdExp().equals("N")) {
				vo.setAdExp("활성화");
			} else if(vo.getAdExp().equals("Y")) {
				vo.setAdExp("만료");
			}
		}
		
		log.info("예약 목록 : " + advListVOList);
		
		int total = this.adAdvService.getTotal(map);
		log.info("total : " + total);
		
		PagingDTO<AdvListVO> data = new PagingDTO<AdvListVO>(total, currentPage, size, advListVOList); 
		
		model.addAttribute("data", data);
		
		return "admin/advertise/list";
	}
	
	@ResponseBody
	@PostMapping("/advertise/advDetailPost")
	public AdvListVO advDetail(@RequestParam("advId") String advId) {
		log.info("advId : " + advId);
		
		AdvListVO vo = this.adAdvService.advDetail(advId);
		
		if(vo.getExistPay().equals("Y")) {
			vo.setExistPay("결제");
		} else if(vo.getExistPay().equals("N")) {
			vo.setExistPay("미결제");
		}

		if(vo.getAdExp().equals("Y")) {
			vo.setAdExp("만료");
		} else if(vo.getAdExp().equals("N")) {
			vo.setAdExp("활성화");
		}
		
		log.info("AdvListVO : " + vo);
		
		return vo;
	}

	@GetMapping("/advertise/request")
	public String advertiseRequest() {
		return "admin/advertise/request";
	}

	@GetMapping("/advertise/setting")
	public String advertiseSetting() {
		return "admin/advertise/setting";
	}
}







package kr.or.ddit.member.service.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.member.mapper.QnaBoardMapper;
import kr.or.ddit.member.mapper.TripBoardMapper;
import kr.or.ddit.member.service.QnaBoardService;
import kr.or.ddit.member.service.TripBoardService;
import kr.or.ddit.util.CommonFile;
import kr.or.ddit.vo.AnsVO;
import kr.or.ddit.vo.AttachDeVO;
import kr.or.ddit.vo.AttachVO;
import kr.or.ddit.vo.BrdVO;
import kr.or.ddit.vo.CmtVO;
import kr.or.ddit.vo.LikeBrdVO;
import kr.or.ddit.vo.TourVO;
import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;

@Slf4j
@Service
public class QnaBoardServiceImpl implements QnaBoardService {

	@Autowired
	QnaBoardMapper qnaBoardMapper;
	
	//오늘의 질문 조회하기 (최근순) 답변 없는
	@Override
	public List<BrdVO> qnaBoardList(Map<String, String> map) {
		return this.qnaBoardMapper.qnaBoardList(map);
	}
	//QNA 조회하기 (답변있는)
	@Override
	public List<BrdVO> qnaBoardAnsList(Map<String, String> map) {
		return this.qnaBoardMapper.qnaBoardAnsList(map);
	}
	//질문,답변 게시판 모든 질문 조회
	@Override
	public List<BrdVO> allQnaBoardList(Map<String, String> map) {
		return this.qnaBoardMapper.allQnaBoardList(map);
	}
	//많이 본 qna 상위 4개 조회
	@Override
	public List<BrdVO> manyQnaList(Map<String, String> map) {
		return this.qnaBoardMapper.manyQnaList(map);
	}
	
	
	//답변 유무 조회
	@Override
	public int hasAns(String brdId) {
		return this.qnaBoardMapper.hasAns(brdId);
	}

	
	
	//질문 상세보기
	@Override
	public List<BrdVO> qnaBoardDetail(String brdId) {
		return this.qnaBoardMapper.qnaBoardDetail(brdId);
	}
	//질문 삭제하기
	@Override
	public int queDelete(String brdId) {
		return this.qnaBoardMapper.queDelete(brdId);
	}
	//답변 상세보기
	@Override
	public List<AnsVO> ansDetail(String brdId) {
		return this.qnaBoardMapper.ansDetail(brdId);
	}
	//질문 등록하기
	@Override
	public int queWrite(BrdVO brdVO) {
		return this.qnaBoardMapper.queWrite(brdVO);
	}
	//질문수정하기
	@Override
	public int qnaUpdate(BrdVO brdVO) {
		return this.qnaBoardMapper.qnaUpdate(brdVO);
	}
	
	//답변 등록하기
	@Override
	public int ansWrite(AnsVO ansVO) {
		return this.qnaBoardMapper.ansWrite(ansVO);
	}
	//답변 삭제하기
	@Override
	public int ansDelete(String ansId) {
		return this.qnaBoardMapper.ansDelete(ansId);
	}
	//답변 수정하기
	@Override
	public int ansUpdate(AnsVO ansVO) {
		return this.qnaBoardMapper.ansUpdate(ansVO);
	}
	
	
	
	
	
	//조회수
	@Override
	public int qnaViewCnt(String brdId) {
		return this.qnaBoardMapper.qnaViewCnt(brdId);
	}
	
	
	//오늘의 질문
	@Override
	public int todayQna(BrdVO brdVO) {
		return qnaBoardMapper.todayQna(brdVO);
	}
	//오늘의 답변
	@Override
	public int todayAns(AnsVO ansVO) {
		return qnaBoardMapper.todayAns(ansVO);
	}
	//누적 질문 수
	@Override
	public int countQna(BrdVO brdVO) {
		return qnaBoardMapper.countQna(brdVO);
	}
	//누적답변수
	@Override
	public int countAns(AnsVO ansVO) {
		return qnaBoardMapper.countAns(ansVO);
	}
	
	//답변없는 질문의 수
	@Override
	public int qnaBoardListCnt(BrdVO brdVO) {
		return qnaBoardMapper.qnaBoardListCnt(brdVO);
	}
	//답변 있는 질문의 수
	@Override
	public int qnaBoardAnsListCnt(BrdVO brdVO) {
		return qnaBoardMapper.qnaBoardAnsListCnt(brdVO);
	}
	//질문답변 게시판의 모든 질문의 수
	@Override
	public int allQnaBoardListCnt(BrdVO brdVO) {
		return this.qnaBoardMapper.allQnaBoardListCnt(brdVO);
	}
	
	/**
	 * 댓글기능
	 */
	//댓글 작성
	@Override
	public int cmtWrite(CmtVO cmtVO) {
		return this.qnaBoardMapper.cmtWrite(cmtVO);
	}
	//댓글 수정
	@Override
	public int cmtUpdate(CmtVO cmtVO) {
		return this.qnaBoardMapper.cmtUpdate(cmtVO);
	}
	//댓글 삭제
	@Override
	public int cmtDelete(CmtVO cmtVO) {
		return this.qnaBoardMapper.cmtDelete(cmtVO);
	}
	//댓글 상세보기
	@Override
	public  List<CmtVO> cmtDetail(CmtVO cmtVO) {
		return this.qnaBoardMapper.cmtDetail(cmtVO);
	}
	//댓글 총 개수
	@Override
	public int cmtCount(String ansId) {
		return this.qnaBoardMapper.cmtCount(ansId);
	}

	
	/* 게시글 좋아요 기능 */
	// 좋아요 확인
	@Override
	public int findLike(LikeBrdVO likeBrdVO) {
		return this.qnaBoardMapper.findLike(likeBrdVO);

	}

	// 게시글 좋아요 기능
	@Transactional
	@Override
	public int likeBrd(LikeBrdVO likeBrdVO) {
		int result = this.qnaBoardMapper.likeBrd(likeBrdVO);
		result += this.qnaBoardMapper.insertBrd(likeBrdVO);
		return result;
	}

	// 게시글 좋아요 취소
	@Transactional
	@Override
	public int dislikeBrd(LikeBrdVO likeBrdVO) {
		int result = this.qnaBoardMapper.dislikeBrd(likeBrdVO);
		result += this.qnaBoardMapper.deleteBrd(likeBrdVO);
		return result;
	}
	
	
	
	




}


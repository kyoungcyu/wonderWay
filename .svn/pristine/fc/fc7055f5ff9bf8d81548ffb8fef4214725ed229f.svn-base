package kr.or.ddit.member.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.member.service.QnaBoardService;
import kr.or.ddit.util.PagingDTO;
import kr.or.ddit.vo.AnsVO;
import kr.or.ddit.vo.BrdVO;
import kr.or.ddit.vo.CmtVO;
import kr.or.ddit.vo.LikeBrdVO;
import oracle.jdbc.proxy.annotation.Post;

@RequestMapping("/member/qnaBoard")
@Controller
public class QnaController {

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Autowired
	QnaBoardService qnaBoardService;

	// 질문답변 게시판 페이지 메인
	@GetMapping("/qnaMain")
	public String qnaMain(BrdVO brdVO, AnsVO ansVO, Model model,
			@RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value = "currentPage2", required = false, defaultValue = "1") int currentPage2) {

		Map<String, String> data = new HashMap<String, String>();

		data.put("keyword", keyword);
		data.put("sort", sort);
		data.put("currentPage", Integer.toString(currentPage));

		// 1. 페이징 처리 - 답변 없는 질문 리스트 페이징처리
		// 한 페이지에 10개씩
		int size = 5;
		data.put("size", String.valueOf(size));
		log.info("data : " + data);

		List<BrdVO> list = this.qnaBoardService.qnaBoardList(data);
		log.info("list : " + list);
		model.addAttribute("qnaBoardList", list);
		//
		int total = this.qnaBoardService.qnaBoardListCnt(brdVO);
		log.info("total : " + total);

		PagingDTO<BrdVO> qnaPage = new PagingDTO<BrdVO>(total, currentPage, size, list);
		log.info("qnaPage : " + qnaPage);
		model.addAttribute("qnaPage", qnaPage);

		// 2. 페이징 처리 - 답변 있는 질문 리스트 페이징처리
		// 한 페이지에 10개씩

		Map<String, String> data2 = new HashMap<String, String>();

		data2.put("keyword", keyword);
		data2.put("sort", sort);
		data2.put("currentPage2", Integer.toString(currentPage2));

		int size2 = 5;
		data2.put("size2", String.valueOf(size2));
		log.info("data2 : " + data2);

		List<BrdVO> list2 = this.qnaBoardService.qnaBoardAnsList(data2);
		log.info("list2 : " + list2);
		model.addAttribute("qnaBoardAnsList", list2);
		//
		int total2 = this.qnaBoardService.qnaBoardAnsListCnt(brdVO);
		log.info("total2 : " + total2);

		PagingDTO<BrdVO> qnaPage2 = new PagingDTO<BrdVO>(total2, currentPage2, size2, list2);
		log.info("qnaPage2 : " + qnaPage2);
		model.addAttribute("qnaPage2", qnaPage2);

		// 오늘의 질문
		List<BrdVO> qnaBoardList = this.qnaBoardService.qnaBoardList(data);
		model.addAttribute("qnaBoardList", qnaBoardList);
		log.info("qnaBoardList : " + qnaBoardList);

		// 오늘의 질문 수
		int todayQna = this.qnaBoardService.todayQna(brdVO);
		model.addAttribute("todayQna", todayQna);
		log.info("todayQna : " + todayQna);

		// 오늘의 답변
		int todayAns = this.qnaBoardService.todayAns(ansVO);
		model.addAttribute("todayAns", todayAns);
		log.info("todayAns : " + todayAns);

		// 누적질문수
		int countQna = this.qnaBoardService.countQna(brdVO);
		model.addAttribute("countQna", countQna);
		log.info("countQna : " + countQna);

		// 누적답변수
		int countAns = this.qnaBoardService.countAns(ansVO);
		model.addAttribute("countAns", countAns);
		log.info("countAns : " + countAns);

		// 많이 본 qna 상위 4개 조회
		List<BrdVO> manyQnaList = this.qnaBoardService.manyQnaList(data);
		model.addAttribute("manyQnaList", manyQnaList);
		log.info("manyQnaList : " + manyQnaList);

		// 답변 완료 된 QNA
//		List<BrdVO> qnaBoardAnsList = this.qnaBoardService.qnaBoardAnsList(data2);
//		model.addAttribute("qnaBoardAnsList", qnaBoardAnsList);
//		log.info("qnaBoardAnsList : " + qnaBoardAnsList);

		return "member/qnaBoard/qnaMain";
	}

	// 질문답변 게시글 목록 리스트
	@GetMapping("/qnaList")
	public String qnaList(Model model, BrdVO brdVO, @RequestParam(value = "keyword", required = false) String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value = "currentPage", required = false, defaultValue = "1") int currentPage) {

		// 페이징 처리
		Map<String, String> data = new HashMap<String, String>();

		data.put("keyword", keyword);
		data.put("sort", sort);
		data.put("currentPage", Integer.toString(currentPage));

		int size = 10;
		data.put("size", String.valueOf(size));
		log.info("data : " + data);

		List<BrdVO> list = this.qnaBoardService.allQnaBoardList(data);
		log.info("allQnaBoardList :" + list);
		model.addAttribute("allQnaBoardList", list);
		// 모든 질문
		int total = this.qnaBoardService.allQnaBoardListCnt(brdVO);
		log.info("total : " + total);
		model.addAttribute("total", total);

		PagingDTO<BrdVO> allPage = new PagingDTO<BrdVO>(total, currentPage, size, list);
		log.info("allPage : " + allPage);
		model.addAttribute("allPage", allPage);

		return "member/qnaBoard/qnaList";
	}

	// 게시글 상세보기
	@GetMapping("/qnaDetail")
	public String qnaDetail(@RequestParam("brdId") String brdId, LikeBrdVO likeBrdVO, CmtVO cmtVO, Model model,
			Principal principal) {
		log.info("brdId : " + brdId);
		// 질문 상세보기
		List<BrdVO> brdVO = this.qnaBoardService.qnaBoardDetail(brdId);
		log.info("brdVO : " + brdVO);
		model.addAttribute("brdVO", brdVO);

		// 질문 답변 상세보기
		List<AnsVO> ansVO = this.qnaBoardService.ansDetail(brdId);
		log.info("ansVO : " + ansVO);
		model.addAttribute("ansVO", ansVO);

		// 좋아요 기능
		String memId = principal.getName();
		log.info("memId : " + memId);
		likeBrdVO.setMemId(memId);
		int findLike = this.qnaBoardService.findLike(likeBrdVO);
		model.addAttribute("findLike", findLike);

		// 조회수 기능
		int qnaViewCnt = this.qnaBoardService.qnaViewCnt(brdId);
		log.info("qnaViewCnt : " + qnaViewCnt);
		model.addAttribute("qnaViewCnt", qnaViewCnt);
		if (ansVO.size() != 0) {

			cmtVO.setAnsId(ansVO.get(0).getAnsId());

			// 댓글 내용 불러오기
			List<CmtVO> cmtList = this.qnaBoardService.cmtDetail(cmtVO);
			model.addAttribute("cmtList", cmtList);
			log.info("cmtList : " + cmtList);

			// 댓글 수 조회하기
			int cmtCount = this.qnaBoardService.cmtCount(brdId);
			model.addAttribute("cmtCount", cmtCount);
			log.info("cmtCount : " + cmtCount);
		}

		return "member/qnaBoard/qnaDetail";
	}

	// 질문 등록하기
	@GetMapping("/qnaBoardWrite")
	public String qnaBoardWrite() {
		return "member/qnaBoard/qnaBoardWrite";
	}

	// 질문 등록하기
	@PostMapping("/qnaBoardWritePost")
	public String qmaBOardWritePost(@ModelAttribute BrdVO brdVO) {
		int result = this.qnaBoardService.queWrite(brdVO);
		String brdId = brdVO.getBrdId();
		log.info("brdVO : " + brdVO);

		log.info("result : " + result);
		return "redirect:/member/qnaBoard/qnaDetail?brdId=" + brdId;
	}

	// 질문 수정하기
	@GetMapping("/qnaBoardUpdate")
	public String qnaBoardUpdate(@RequestParam("brdId") String brdId, Model model) {
		log.info("brdId : " + brdId);

		List<BrdVO> brdVO = this.qnaBoardService.qnaBoardDetail(brdId);
		log.info("brdVO : " + brdVO);
		model.addAttribute("brdVO", brdVO);
		return "member/qnaBoard/qnaBoardUpdate";
	}

	// 질문 수정하기
	@ResponseBody
	@PostMapping("/qnaBoardUpdatePost")
	public String qnaBoardUpdatePost(@RequestBody BrdVO brdVO, Principal principal) {
		String memId = principal.getName();
		brdVO.setLastWrtr(memId);
		int data = this.qnaBoardService.qnaUpdate(brdVO);
		log.info("data : " + data);
		return "result";
	}

	// 질문 삭제하기
	@ResponseBody
	@PostMapping("/queDelete")
	public int queDelete(@RequestBody String brdId) {
		log.info("brdId : " + brdId);
		int result = this.qnaBoardService.queDelete(brdId);

		log.info("result : " + result);

		return result;
	}

	/**
	 * 답변 기능
	 */
	// 답변 등록하기
	@PostMapping("/qnaAnsWrite")
	public String qnaAnsWrite(@ModelAttribute AnsVO ansVO, BrdVO brdVO, Principal principal) {
		String ansWr = principal.getName();
		ansVO.setAnsWr(ansWr);
		log.info("ansVO : " + ansVO);
		log.info("brdVO : " + brdVO);
		int result = this.qnaBoardService.ansWrite(ansVO);
//		return "/member/qnaBoard/qnaDetail";
		return "redirect:/member/qnaBoard/qnaDetail?brdId=" + brdVO.getBrdId();
	}

	// 답변 삭제하기
	@ResponseBody
	@PostMapping("/ansDelete")
	public int ansDelete(String ansId) {
		log.info("ansId : " + ansId);
		int result = this.qnaBoardService.ansDelete(ansId);
		log.info("result : " + result);

		return result;
	}

	// 답변 수정하기
	@ResponseBody
	@PostMapping("/ansUpdate")
	public int ansUpdate(@RequestBody AnsVO ansVO, Model model) {
		
		log.info("ansVO : " + ansVO);
		int result = this.qnaBoardService.ansUpdate(ansVO);
		log.info("result : " + result);
		model.addAttribute("result",result);

		return result;
	}

	/**
	 * 댓글
	 */

	// 댓글 작성하기
	@ResponseBody
	@PostMapping("/cmtWrite")
	public String cmtWrite(@RequestBody CmtVO cmtVO, Principal principal) {

		String cmtWr = principal.getName();
		cmtVO.setCmtWr(cmtWr);
		// cmtVO : CmtVO(cmtId=null, cmtWr=test01, cmtCntn=sfad, cmtDt=null,
		// brdId=D0120230629424, repCmtId=null, repLevel=0)
		log.info("cmtVO : " + cmtVO);

		int result = this.qnaBoardService.cmtWrite(cmtVO);
		log.info("result : " + result);

		if (result > 0) {// 성공
			return "success";
		} else {// 실패
			return "fail";
		}
	}

	// 댓글 수정하기
	@ResponseBody
	@PostMapping("/cmtUpdate")
	public String cmtUpdate(@RequestBody CmtVO cmtVO, Model model, Principal principal) {

		String cmtWr = principal.getName();
		cmtVO.setCmtWr(cmtWr);
		model.addAttribute("cmtWr");

		int result = this.qnaBoardService.cmtUpdate(cmtVO);

		model.addAttribute("result", result);

		if (result > 0) {// 성공
			return "success";
		} else {// 실패
			return "fail";
		}
	}

	// 댓글 삭제하기
	@ResponseBody
	@PostMapping("/cmtDelete")
	public String cmtDelete(@RequestBody CmtVO cmtVO, Model model) {

		int result = this.qnaBoardService.cmtDelete(cmtVO);

		model.addAttribute("result", result);
		log.info("result : " + result);

		if (result > 0) {// 성공
			return "success";
		} else {// 실패
			return "fail";
		}

	}

	// 여행후기 글 좋아요 기능
	@ResponseBody
	@PostMapping("/likeBrd")
	public String likeBrd(@RequestBody LikeBrdVO likeBrdVO, Principal principal, Model model) {
		// 좋아요 눌렀는지 확인하기
		int findLike = this.qnaBoardService.findLike(likeBrdVO);
		model.addAttribute("findLike", findLike);

		String memId = principal.getName();
		log.info("memId : " + memId);

		int updatedLikeCount = this.qnaBoardService.likeBrd(likeBrdVO);
		log.info("likeBrdVO : " + likeBrdVO);

		model.addAttribute("updatedLikeCount", updatedLikeCount);

		if (updatedLikeCount > 0) {
			return "success";
		} else {
			return "fail";
		}

	}

	// 여행후기 글 좋아요 안함 기능
	@ResponseBody
	@PostMapping("/dislikeBrd")
	public String dislikeBrd(@RequestBody LikeBrdVO likeBrdVO, Principal principal, Model model) {

		int findLike = this.qnaBoardService.findLike(likeBrdVO);

		model.addAttribute("findLike", findLike);

		String memId = principal.getName();
		log.info("memId : " + memId);

		int updatedDislikeCount = this.qnaBoardService.dislikeBrd(likeBrdVO);
		log.info("likeBrdVO : " + likeBrdVO);

		model.addAttribute("updatedDislikeCount", updatedDislikeCount);

		if (updatedDislikeCount > 0) {
			return "success";
		} else {
			return "fail";
		}
	}

}

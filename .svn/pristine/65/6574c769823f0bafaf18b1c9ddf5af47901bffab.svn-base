package kr.or.ddit.util.websocket;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

@Component
public class EchoHandler extends TextWebSocketHandler {
	public static final Logger log = LoggerFactory.getLogger(EchoHandler.class);
	//전체로그인한 회원
	List<WebSocketSession> sessionList = new ArrayList<WebSocketSession>();
	//업체채팅 회원
	List<WebSocketSession> busiChatList = new ArrayList<WebSocketSession>();

	Map<String, WebSocketSession> userSessionsMap = new HashMap<String, WebSocketSession>();

	// afterConnectionEstablished : 웹소켓이 연결되면 호출되는 함수
	// 웹소켓이 연결 되는 것 = 프론트에서 웹소켓이 정확한 경로를 잡아 생성 되는 것
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("소켓연결 : " + session.toString());
		sessionList.add(session);
		log.info("{}연결됨", session.getId());

	}

	// 웹소켓 클라이언트가 텍스트 메세지 전송시 호출되는 메소드
	// WebSocketSession session : 전송 주체 정보가 담긴 세션
	// TextMessage message : 전송 받은 메세지 정보
	/**
	 * 1. ALARM 분류(CHAT,BOARD,...)	
	 * 2. 더 상세한 분류(MEM, BUSI, ADMIN)
	 * 3. 현재접속ID
	 * 4. 상태
	 * 
	 * ========================================
	 * 	기능 분류     상세기능분류     현재접속ID     상태
	 * ========================================
	 *   CHAT   CHATBUSI     ID       ON/OFF
	 * ----------------------------------------
	 * 
	 * -----------------------------------------
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		System.out.printf("소켓메세지 받은. %s로부터 [%s] 받음\n", session.getId(), message.getPayload());
		String recvMsg =  message.getPayload();
		String[] recvMsgArr = recvMsg.split(",");
		System.out.println("recvMsgArr"+recvMsgArr);
		String one = recvMsgArr[0];
		String two = recvMsgArr[1];
		String three = recvMsgArr[2];
		String four = recvMsgArr[3];

		System.out.println("one"+one);
		System.out.println("two"+two);
		System.out.println("three"+three);
		System.out.println("four"+four);
		
		if (one.equals("CHAT")) {
			if (two.equals("CHATBUSI")) {
				if (four.equals("ON")){
					System.out.println("CHATBUSI드왔냐");
					//업체채팅리스트에 넣기
					busiChatList.add(session);
					//업체채팅리스트에게 입장알람
					for (WebSocketSession chatSess : busiChatList) {
						chatSess.sendMessage(new TextMessage(three+"님이 입장했습니다."));
						System.out.println("busiChatList"+chatSess);
					}
				}else if (four.equals("OFF")){
					//업체채팅리스트한테 퇴장알람
					for (WebSocketSession chatSess : busiChatList) {
						chatSess.sendMessage(new TextMessage(three+"님이 퇴장했습니다."));
						System.out.println("busiChatList"+chatSess);
					}
					//업체채팅리스트에서 제거
					busiChatList.remove(session);
				}
				
			} else if (one == "CHATADMIN") {
				
				
			}
			
			
			
			
		} else if (one == "one") {
			
		} else if (one == "two") {
			
		} else {
			
		}
		
		
		
		
		session.sendMessage(new TextMessage("echo: " + message.getPayload()));
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("소켓닫힘. afterConnectionClosed");
		System.out.printf("%s 연결 끊김\n", session.getId());
		sessionList.remove(session);
	}
}

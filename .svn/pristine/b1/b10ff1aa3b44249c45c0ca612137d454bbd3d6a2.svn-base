package kr.or.ddit.admin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.admin.service.AdBrdServiece;
import kr.or.ddit.admin.service.AdMemServiece;
import kr.or.ddit.admin.service.AdRfdService;
import kr.or.ddit.admin.service.AdRsvService;
import kr.or.ddit.util.PagingDTO;
import kr.or.ddit.vo.BrdVO;
import kr.or.ddit.vo.IntrMemVO;
import kr.or.ddit.vo.MemVO;
import kr.or.ddit.vo.RfdListVO;
import kr.or.ddit.vo.RsvListVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/admin")
@Controller
public class AdminController {
	@Autowired
	AdMemServiece memServiece;
	
	@Autowired
	AdBrdServiece brdServiece;
	
	@Autowired
	AdRsvService adRsvService;
	
	@Autowired
	AdRfdService adRfdService;
	
	//관리자 메인
	@GetMapping("/main")
	public String main() {
		return "admin/main";
	}
	
	//회원 목록
	@GetMapping("/mem/list")
	public String memList(Model model, 
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "sort", required = false, defaultValue = "") String sort,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		
	    Map<String, String> map = new HashMap<String, String>();
	    map.put("keyword", keyword);
	    map.put("sort", sort);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
	    
		List<MemVO> memList = this.memServiece.memList(map);
		log.info("memList : " + memList);
		
		int total = this.memServiece.memTotal(map);
		log.info("total : " + total);
		
		PagingDTO<MemVO> memPage = new PagingDTO<MemVO>(total, currentPage, size, memList);
		
		log.info("memPage : " + memPage);
		
		model.addAttribute("data", memPage);
		
		return "admin/mem/list";
	}
	
	//회원 제재
	@GetMapping("/mem/restriction")
	public String memRestriction(Model model,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value="currentPage",required=false,defaultValue="1") int currentPage) {
		Map<String, String> map = new HashMap<>();
	    map.put("keyword", keyword);
	    map.put("currentPage", Integer.toString(currentPage));
	    int size = 20;
	    map.put("size", String.valueOf(size));
	    log.info("map : " + map);
		
		List<BrdVO> brdReprtList = this.memServiece.brdReprtList(map);
		log.info("brdReprtList : " + brdReprtList);
		
		int total = this.memServiece.brdReptTotal(map);
		log.info("total : " + total);
		
		PagingDTO<BrdVO> memReptPage = new PagingDTO<BrdVO>(total, currentPage, size, brdReprtList);
		log.info("memReptPage : " + memReptPage);
		
		model.addAttribute("data", memReptPage);
		
		return "admin/mem/restriction";
	}
	
	//회원 상담/채팅
	@GetMapping("/mem/counseling")
	public String memCounseling() {
		return "admin/mem/counseling";
	}
	
	//숙박 업체 관리
	@GetMapping("/busi/sty")
	public String busiAcm(Model model) {
		return "admin/busi/sty";
	}
	
	//게시판 목록
	@GetMapping("/brd/list")
	public String brdList(Model model) {
		List<BrdVO> data = this.brdServiece.brdList();
		
		log.info("data : " + data);
		
		model.addAttribute("data", data);
		
		return "admin/brd/list";
	}
	
	//회원 상세
	@GetMapping("/mem/detail")
    public String memberDetail(@RequestParam("memId") String memId, Model model) {
		log.info("memId : " + memId);
		MemVO memVO = new MemVO();
		memVO.setMemId(memId);
		memVO = this.memServiece.memDetail(memVO);
		log.info("memVO : " + memVO);
		
		List<BrdVO> brdList = this.memServiece.memBrdList(memVO);
		log.info("brdList : " + brdList);
		
		model.addAttribute("memVO", memVO);
		model.addAttribute("brdList", brdList);
		
		return "admin/mem/detail";
    }
	
	//회원 경고 상태 변경
	@ResponseBody
	@PostMapping("/mem/wrnStUpdate")
	public String wrnStUpdate(@RequestBody Map<String, String> map) {
		log.info("map : " + map);
		
		String memId = map.get("memId");
		String wrnSt = map.get("wrnSt");
        
        MemVO memVO = new MemVO();
        memVO.setMemId(memId);
        memVO.setWrnSt(wrnSt);
        log.info("memVO : " + memVO);
        
        this.memServiece.updateWarningStatus(memVO);
        if(wrnSt == "0") {
        	int delete = this.memServiece.deleteIntrMem(map);
        	log.info("delete : " + delete);
        }
        if (wrnSt == "2") {
        	int insert = this.memServiece.insertInrtMem(map);
        	log.info("insert : " + insert);
        }
        
		return memId;
	}
	
//	김찬수
	
	// 예약 목록 페이지
	@GetMapping("/reserve/list")
	public String reserveList(Model model) {
		log.info("Called reserveList");
		List<RsvListVO> data = adRsvService.rsvList();
		
		for(RsvListVO vo : data) {
			if(vo.getPayStt().equals("Y")) {
				vo.setPayStt("완료");
			} else {
				vo.setPayStt("대기");
			}
		}
		
		model.addAttribute("data", data);
		
		log.info("예약 목록 : " + data);
		
		return "admin/reserve/list";
	}
	
	@ResponseBody
	@PostMapping("/reserve/rsvDetailPost")
	public RsvListVO reserveDetail(@RequestParam("memId") String memId) {
		log.info("memId : " + memId);
		
		RsvListVO data = adRsvService.rsvDetail(memId);
		
		log.info("data : " + data);
		
		return data;
	}
	
	
	@PostMapping("/reserve/rsvFilter")
	public String reserveFilter(Model model
								, @RequestParam(value = "searchName", required=false, defaultValue = "") String searchName
								, @RequestParam(value = "selectVal", required=false, defaultValue = "") String selectVal) {
		
		log.info("searchName : " + searchName);
		log.info("selectVal : " + selectVal);
		
		Map<String,String> map = new HashMap<String, String>();
		map.put("searchName", searchName);
		map.put("selectVal", selectVal);
		
		List<RsvListVO> data = adRsvService.rsvFilter(map);
		log.info("예약 목록 : " + data);
		
		for(RsvListVO vo : data) {
			if(vo.getPayStt().equals("Y")) {
				vo.setPayStt("완료");
			} else {
				vo.setPayStt("대기");
			}
		}
		
		model.addAttribute("data", data);	
		model.addAttribute("searchName", searchName);
		
		return "admin/reserve/list";
	}
	

	@GetMapping("/reserve/refund")
	public String refundList(Model model) {
		List<RfdListVO> data = adRfdService.rfdList();
		log.info("예약 목록 : " + data);
		
		model.addAttribute("data", data);
		
		return "admin/reserve/refund";
	}
	
	@ResponseBody
	@PostMapping("/reserve/rfdDetailPost")
	public RfdListVO refundDetail(@RequestParam("payId") String payId) {
		log.info("payId : " + payId);
		
		RfdListVO data = adRfdService.rfdDetail(payId);
		
		log.info("RfdListVO : " + data);
		
		return data;
	}
	
	@ResponseBody
	@PostMapping("/reserve/rfdAccept")
	public String refundAccept(@RequestParam("acceptId") String payId) {
		log.info("Called Accept Refund");
		
		int cnt = adRfdService.rfdAccept(payId);
		
		if(cnt > 0) {
			log.info("update success");
			return "success";
		} else {
			return "failed";
		}
	}

	@ResponseBody
	@PostMapping("/reserve/rfdDenied")
	public String refundDenied(@RequestParam("deniedId") String payId) {
		int cnt = adRfdService.rfdDenied(payId);
		
		if(cnt > 0) {
			log.info("update success");
			return "success";
		} else {
			return "failed";
		}
	}
	
	@GetMapping("/advertise/list")
	public String advertiseList() {
		return "admin/advertise/list";
	}

	@GetMapping("/advertise/request")
	public String advertiseRequest() {
		return "admin/advertise/request";
	}

	@GetMapping("/advertise/setting")
	public String advertiseSetting() {
		return "admin/advertise/setting";
	}
}







